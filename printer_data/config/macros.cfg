######################### PRINT START / END #########################
[gcode_macro PRINT_START]
variable_runout_on: ""
gcode:
    # Parameters
    {% set bed_adjust = params.BED_ADJUSTMENT|default(1)|float %}
    {% set bed = params.BED|int %}
    {% set hotend = params.EXTRUDER|int %}
    {% set chamber = params.CHAMBER|default(0)|int %}
    {% set material = params.MATERIAL|default('unknown')|string %}
    {% set prime_line = params.PRIME_LINE|default(2)|int %}

    _SET_BED_ADJUSTED_TEMP ADJUSTMENT={bed_adjust} ; adjust all bed temperature

    _AUTO_OFF_DISABLE
    # SET_LED LED=caselight WHITE=1                                   ; turn on case light
    SET_LED LED=caselight GREEN=1 RED=1 BLUE=1                                   ; turn on case light
    RESETSPEEDS                                             ; reset speed, accel etc to configured values
    RESETRGB                                              ; reset LCD RGB

    M104 S150                                             ; set hotend to no-ooze temp
    M140 S{bed}                                             ; set bed to target temp
    _NEVERMORE_AUTO CHAMBER={chamber} MATERIAL={material}

    STATUS_HOMING
    _CG28                                                 ; home
    STATUS_HEATING
    {% if printer["temperature_sensor chamber"].temperature < chamber %}                ; - if chamber is not at temp yet:
      HEATSOAK T={bed} MOVE=1 MATERIAL={material}
      M190 S{bed}                                           ;   wait for bed final temp
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber}              ;   wait for chamber final temp
    {% else %}                                              ; - if chamber is already at temp:
      {% if printer.heater_bed.temperature < (bed-2) %}                       ; -- but bed is not fully heated (within 2C):
        HEATSOAK T={bed} MOVE=1  MATERIAL={material}
        M190 S{bed}                                         ;     wait for bed final temp
      {% else %}                                            ; -- and bed is already heated:
        HEATSOAK T={bed} MOVE=0 MATERIAL={material}
      {% endif %}
    {% endif %} 
    M106 S0                                               ; turn off part cooling fan (from heatsoak)

    STATUS_LEVELING
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL

    STATUS_MESHING
    BED_MESH_CALIBRATE
    G28 Z

    SMART_PARK

    STATUS_HEATING
    M109 S{hotend}

    STATUS_PRINTING
    { runout_on }

    {% if prime_line == 1 %}
      VORON_PURGE
    {% elif prime_line == 2 %}
      LINE_PURGE
    {% endif %}

[gcode_macro PRINT_END]
variable_runout_off: ""
gcode:
    RESETRGB                                              ; revert LCD RGB
    { runout_off }
    CLEAR_PAUSE                                             ; clear pause (from M191) if there is one                       

    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                                                              ; wait for buffer to clear
    M83
    G92 E0                                                              ; zero the extruder
    G1 E-10.0 F1200

    TURN_OFF_HEATERS

    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 10) %}
        {% set z_safe = 10.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing

    G90                                                                 ; absolute positioning
    G1 X{printer.toolhead.axis_maximum.x-10} Y{printer.toolhead.axis_maximum.y-10} F19500.0           ; park nozzle at rear
    M107                                                              ; turn off part cooling fan

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

    BED_MESH_CLEAR
    _NEVERMORE_OFF
    _AUTO_OFF_ENABLE
    _SET_BED_ADJUSTED_TEMP ADJUSTMENT=1
    RESETSPEEDS                                             ; reset speed, accel etc to configured max values
    STATUS_READY

[delayed_gcode DELAYED_OFF]
initial_duration: 1800
gcode:
  OFF                               ; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)

[gcode_macro _AUTO_OFF_DISABLE]
description: Disable timer for auto off feature
gcode:
  UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0

[gcode_macro _AUTO_OFF_ENABLE]
description: Enable timer for auto off feature
gcode:
  UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=1800

######################### PAUSE/RESUME/CANCEL #########################
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  SDCARD_RESET_FILE
  PRINT_END
  BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  # Parameters
  {% set z = params.Z|default(10)|int %}                                          ; z hop amount

  {% if printer['pause_resume'].is_paused|int == 0 %}   
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                                 ; set z hop variable for reference in resume macro
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}                 ; set hotend temp variable for reference in resume macro

    _RUNOUT_OFF
    SAVE_GCODE_STATE NAME=PAUSE                                             ; save current print position for resume        
    BASE_PAUSE                                                      ; pause print
    {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}                    ; check that zhop doesn't exceed z max
      G91                                                       ; relative positioning
      G1 Z{z} F900                                                  ; raise Z up by z hop amount
    {% else %}
      { action_respond_info("Pause zhop exceeds maximum Z height.") }                         ; if z max is exceeded, show message and set zhop value for resume to 0
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
    {% endif %}
    G90                                                         ; absolute positioning
    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500                 ; park toolhead at front center
    SAVE_GCODE_STATE NAME=PAUSEPARK                                           ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
    M104 S0                                                       ; turn off hotend
    SET_IDLE_TIMEOUT TIMEOUT=43200                                              ; set timeout to 12 hours
    STATUS_BUSY
  {% endif %}

# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
  # Parameters
  {% set e = params.E|default(2.5)|int %}

  {% if printer['pause_resume'].is_paused|int == 1 %}
    _RUNOUT_ON
    RESETRGB                                                      ; reset LCD color
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                     ; set timeout back to configured value
    {% if etemp > 0 %}
      M109 S{etemp|int}                                               ; wait for hotend to heat back up
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450                              ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
    G91                                                         ; relative positioning
    M83                                                         ; relative extruder positioning
    {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                        
      G1 Z{zhop * -1} E{e} F900                                           ; prime nozzle by E, lower Z back down
    {% else %}            
      G1 Z{zhop * -1} F900                                              ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
    {% endif %}               
    RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450                                ; restore position
    STATUS_PRINTING
    BASE_RESUME                                                     ; resume print
  {% endif %}

# Filament runout / change alias  
[gcode_macro M600]
gcode:
  LCDRGB R=0 G=1 B=0  # Turn LCD green
  PAUSE

[gcode_macro G32]
gcode:
  _CG28
  QGL
  G28 Z

[gcode_macro HEATSOAK]
gcode:
  # Parameters
  {% set t = params.T|default(110)|int %}
  {% set move = params.MOVE|default(1)|int %}
  {% set material = params.MATERIAL|default('ABS')|string %}

  _AUTO_OFF_DISABLE
  # SET_LED LED=caselight WHITE=1         ; turn on case light
  SET_LED LED=caselight GREEN=1 RED=1 BLUE=1         ; turn on case light
  M140 S{t}                   ; heat bed
    _NEVERMORE_AUTO MATERIAL={material}
  {% if t >= 100 %}
    M104 S150                 ; set hotend to no-ooze temp
    M106 S205                   ; turn on part fan (80%)
  {% else %}
    M106 S0                   ; turn part fan off
  {% endif %}
  {% if move == 1 %}
    _CG28                   ; conditional home
    PARKCENTER                  ; move to bed
  {% endif %}

######################## Nevermore controls ########################
[gcode_macro _NEVERMORE_AUTO]
description: Automatically turn on nevermore
gcode:
  {% set chamber = params.CHAMBER|default(0)|int %}
  {% set material = params.MATERIAL|default('ABS')|string %}

  {% if material in ('ABS') %}
     _NEVERMORE_ON
  {% elif material in ('PLA', 'PETG') %}
     _NEVERMORE_OFF
  {% elif chamber >= 20 %}
     {action_respond_info("Material is %s, chamber set to %d. Defaulting to Nevermore ON" % (material, chamber))}
     _NEVERMORE_ON
  {% endif %}

[gcode_macro _NEVERMORE_ON]
description: helper for turning on nevermore
gcode:
  SET_FAN_SPEED FAN=nevermore SPEED=0.8

[gcode_macro _NEVERMORE_OFF]
description: helper for turning on nevermore
gcode:
  SET_FAN_SPEED FAN=nevermore SPEED=0

######################### LCD RGB CONTROLS #########################

# Set LCD RGB at startup
[delayed_gcode SETDISPLAYNEOPIXEL]
initial_duration: 1
gcode:
  RESETRGB

# Default RGB
[gcode_macro RESETRGB]
gcode:
  SET_LED LED=lcd RED=1 GREEN=0.45 BLUE=0.4 INDEX=1 TRANSMIT=0
  SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=2 TRANSMIT=0
  SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=3

# Example LCDRGB R=1 G=0 B=0
[gcode_macro LCDRGB]
gcode:
  {% set r = params.R|default(1)|int %}
  {% set g = params.G|default(1)|int %}
  {% set b = params.B|default(1)|int %}

  SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
  SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=2 TRANSMIT=0
  SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=3
  
######################### CONDITIONAL HOMING #########################

# Conditional G28 (home if not already homed)
[gcode_macro _CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
  _CG28                                                                             ; home if not already homed
  SAVE_GCODE_STATE NAME=PARKFRONT
  G90                                                                               ; absolute positioning
  G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500    
  RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
  _CG28                                                                             ; home if not already homed
  SAVE_GCODE_STATE NAME=PARKFRONT
  G90                                                                               ; absolute positioning
  G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500                   
  RESTORE_GCODE_STATE NAME=PARKFRONT
  
# Park top rear left
[gcode_macro PARKREAR]
gcode:
  _CG28                                                                             ; home if not already homed
  SAVE_GCODE_STATE NAME=PARKREAR
  G90                                                                               ; absolute positioning
  G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500   
  RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
  _CG28                                                                             ; home if not already homed
  SAVE_GCODE_STATE NAME=PARKCENTER
  G90                                                                               ; absolute positioning
  G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500  
  RESTORE_GCODE_STATE NAME=PARKCENTER
  
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
  _CG28                                                                             ; home if not already homed
  SAVE_GCODE_STATE NAME=PARKBED
  G90                                                                               ; absolute positioning
  G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500                   
  RESTORE_GCODE_STATE NAME=PARKBED
  
######################### ALIASES/SHORTCUTS #########################

[gcode_macro QGL]
gcode:
  STATUS_LEVELING
  BED_MESH_CLEAR
  QUAD_GANTRY_LEVEL
  STATUS_READY
  
# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
  M84                       ; turn steppers off
  TURN_OFF_HEATERS                ; turn bed / hotend off
  M107                                    ; turn print cooling fan off
  _NEVERMORE_OFF
  # SET_LED LED=caselight WHITE=0         ; turn light off
  SET_LED LED=caselight GREEN=0 RED=0 BLUE=0        ; turn light off
  STATUS_OFF

######################### TESTING #########################

# Dump all Klipper parameters to terminal, helps find names and values of variables for use in macros

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

# Move toolhead diagnonally to max Z and back. For "settling in" after tinkering with Z

[gcode_macro SGT]
gcode:
  {% set t = params.T|int %}
  AUTOTUNE_TMC STEPPER=stepper_x sg4_thrs={t}
  AUTOTUNE_TMC STEPPER=stepper_y sg4_thrs={t}
